"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var credit_card_format_directive_1 = require("./credit-card-format.directive");
var core_1 = require("@angular/core");
var platform_browser_1 = require("@angular/platform-browser");
var TestCreditCardFormatComponent = (function () {
    function TestCreditCardFormatComponent() {
    }
    TestCreditCardFormatComponent.decorators = [
        { type: core_1.Component, args: [{
                    template: "<input type=\"tel\" ccNumber>"
                },] },
    ];
    TestCreditCardFormatComponent.ctorParameters = function () { return []; };
    return TestCreditCardFormatComponent;
}());
describe('Directive: CreditCardFormat', function () {
    var component;
    var fixture;
    var inputEl;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [TestCreditCardFormatComponent, credit_card_format_directive_1.CreditCardFormatDirective]
        });
        fixture = testing_1.TestBed.createComponent(TestCreditCardFormatComponent);
        component = fixture.componentInstance;
        inputEl = fixture.debugElement.query(platform_browser_1.By.css('input'));
    });
    it('formats card number tick by tick', testing_1.fakeAsync(function () {
        inputEl.nativeElement.value = '4111 1111';
        inputEl.triggerEventHandler('keydown', { keyCode: 49, which: 49 });
        fixture.detectChanges();
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 1111');
        inputEl.triggerEventHandler('keypress', { keyCode: 49, which: 49 });
        fixture.detectChanges();
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 1111');
        inputEl.nativeElement.value = '4111 11111';
        inputEl.triggerEventHandler('input', null);
        fixture.detectChanges();
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 1111 1');
        inputEl.triggerEventHandler('keyup', { keyCode: 49, which: 49 });
        fixture.detectChanges();
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 1111 1');
    }));
    it('formats card number one tick', testing_1.fakeAsync(function () {
        inputEl.nativeElement.value = '4111 1111';
        inputEl.triggerEventHandler('keydown', { keyCode: 49, which: 49 });
        fixture.detectChanges();
        expect(inputEl.nativeElement.value).toBe('4111 1111');
        inputEl.triggerEventHandler('keypress', { keyCode: 49, which: 49 });
        fixture.detectChanges();
        expect(inputEl.nativeElement.value).toBe('4111 1111');
        inputEl.nativeElement.value = '4111 11111';
        inputEl.triggerEventHandler('input', null);
        fixture.detectChanges();
        expect(inputEl.nativeElement.value).toBe('4111 11111');
        inputEl.triggerEventHandler('keyup', { keyCode: 49, which: 49 });
        fixture.detectChanges();
        expect(inputEl.nativeElement.value).toBe('4111 11111');
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 1111 1');
    }));
    it('deletes from middle of value', testing_1.fakeAsync(function () {
        inputEl.nativeElement.value = '4111 1111 111';
        inputEl.nativeElement.selectionStart = 5;
        inputEl.nativeElement.selectionEnd = 5;
        inputEl.nativeElement.focus();
        var defPrevented = false;
        inputEl.triggerEventHandler('keydown', { keyCode: 8, which: 8, preventDefault: function () { defPrevented = true; } });
        fixture.detectChanges();
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 1111 11');
        expect(inputEl.nativeElement.selectionStart).toBe(3);
        expect(inputEl.nativeElement.selectionEnd).toBe(3);
        expect(defPrevented).toBeTruthy();
    }));
    it('deletes from beginning of value', testing_1.fakeAsync(function () {
        inputEl.nativeElement.value = '5 411 1111';
        inputEl.nativeElement.selectionStart = 2;
        inputEl.nativeElement.selectionEnd = 2;
        inputEl.nativeElement.focus();
        var defPrevented = false;
        inputEl.triggerEventHandler('keydown', { keyCode: 8, which: 8, preventDefault: function () { defPrevented = true; } });
        fixture.detectChanges();
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 111');
        expect(inputEl.nativeElement.selectionStart).toBe(0);
        expect(inputEl.nativeElement.selectionEnd).toBe(0);
        expect(defPrevented).toBeTruthy();
    }));
    it('does not modify deleting from end of value', testing_1.fakeAsync(function () {
        inputEl.nativeElement.value = '4111 1111 111';
        inputEl.nativeElement.selectionStart = 13;
        inputEl.nativeElement.selectionEnd = 13;
        inputEl.nativeElement.focus();
        var defPrevented = false;
        inputEl.triggerEventHandler('keydown', { keyCode: 8, which: 8, preventDefault: function () { defPrevented = true; } });
        fixture.detectChanges();
        testing_1.tick(10);
        expect(inputEl.nativeElement.value).toBe('4111 1111 111');
        expect(inputEl.nativeElement.selectionStart).toBe(13);
        expect(inputEl.nativeElement.selectionEnd).toBe(13);
        expect(defPrevented).toBeFalsy();
    }));
});
//# sourceMappingURL=credit-card-format.directive.spec.js.map